#ifndef _CTP_EXT_H_
#define _CTP_EXT_H_

#pragma once


typedef unsigned char       BYTE;

static BYTE bInitRsp[171] = {
    0x02, 0x00, 0x00, 0xA7, 0x01, 
    0x03, 0x0F, 0x4C, 0xE4, 0x30, 0x26, 0xE5, 0x02, 0x01, 0x92, 0xE7, 0x55, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEA, 0x40, 0x33, 0x01, 0x35, 0xE3, 0x80, 0x58, 0xFC, 0x84, 0x2D, 0x86, 0x5E, 0x9C, 0x11, 0xF3, 0x8B, 0x29, 0x45, 0x5F, 0x69, 0x2B, 0x24, 0x22, 0x2B, 0x84, 0x37, 0xF7, 0x49, 0x63, 0xFE, 0x3C, 0xBF, 0x78, 0x17, 0x51, 0x83, 0x4F, 0xAB, 0xFD, 0x7F, 0x24, 0xDA, 0xB1, 0x53, 0x45, 0xAF, 0xDA, 0x0B, 0x41, 0xAF, 0x37, 0xAE, 0xC9, 0xAA, 0xF9, 0x72, 0x38, 0xC1, 0x2E, 0x8F, 0x21, 0x1B, 0xE0, 0xE0, 0x69, 0x96, 0xB2, 0x5B, 0x72, 0xFA, 0xE0, 0xED, 0x20, 0x2B, 0x03, 0x54, 0x96, 0xD2, 0xD1, 0x5D, 0xF7, 0xAD, 0x4B, 0x28, 0x59, 0x65, 0x19, 0x97, 0x81, 0x84, 0x4D, 0x39, 0xA1, 0x2C, 0x48, 0x95, 0x9B, 0x5A, 0x45, 0xBE, 0xC1, 0x5C, 0x66, 0x02, 0xD2, 0xC0, 0x4A, 0x5A, 0xF5, 0x50, 0x94, 0xC7, 0x6B, 0x7E, 0xB4, 0x3C, 0x95, 0x4B, 0x49, 0x5F, 0x2B, 0x3B, 0x2D, 0xD7, 0x23, 0x40, 0xAC, 0x04, 0xA0, 0x89, 0xBA, 0x96, 0xFE, 0xD8, 0xD6, 0x56, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 0xEF, 
    0xEF, 0xEF, 0xEF, 0xEC
};


static BYTE bHeartBeat[] = {
  0x00, 0x02, 0x00, 0x00, 0x05, 0x00
};


static BYTE bFirstRsp[23] = {
  0x02,  0x00, 0x00, 0x13, 0x01, 0x03, 0x0f, 0x4c, 0xe4, 0x30, 0x28, 0xe5,
0x01, 0xe1, 0x59, 0xe7, 0x55, 0xef, 0xef, 0xef, 0xef, 0xef, 0xea
};


static BYTE bLoginRsp[] = {
  0x02, 0x00, 0x00, 0x35, 0x01, 0x03, 0x0f, 0x4c, 0xe4, 0x30, 0x01, 0xe5, 0x02, 0xe1, 0xf5, 0xe7, 0x55, 0xe4, 0x43, 0x54, 0x50, 0x3a, 0x4e, 0x6f, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0xef, 0xef, 0xef, 0xef, 0xe9, 0x10, 0x03, 0xe1, 0x98, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x32, 0x30, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xe9
};


static BYTE bRspSub[] = {
0x02, 0x00, 0x00, 0x36, 0x01, 0x03, 0x0f, 0x4c, 0xe4, 0x44, 0x02, 0xe5, 0x02, 0xe1, 0xcd, 0xe7, 0x55, 0xe4, 0x43, 0x54, 0x50, 0x3a, 0x4e, 0x6f, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0xef, 0xef, 0xef, 0xef, 0xe9, 0x24, 0x41, 0xe1, 0x70, 0x49, 0x46, 0x32, 0x31, 0x30, 0x32, 0xef, 0xea, 0x49, 0x46, 0x32, 0x31, 0x30, 0x32, 0xef, 0xef, 0xef, 0xef, 0xef
};

static BYTE bRtnMarket[] = {
0x02, 0x00, 0x01, 0x0e, 0x01, 0x03, 0x0f, 0x4c, 0xe4, 0xf1, 0x01, 0xe5, 0x01, 0x02, 0x08, 0xe5, 0x12, 0x02, 0x04, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x32, 0x30, 0xe1, 0x49, 0x46, 0x32, 0x31, 0x30, 0x32, 0xef, 0xef, 0xef, 0xef, 0xe5, 0x40, 0xb5, 0x56, 0x99, 0x99, 0x99, 0x99, 0x9a, 0x40, 0xb5, 0x34, 0xe5, 0x40, 0xb5, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x40, 0xf3, 0x25, 0x90, 0xe4, 0x40, 0xb5, 0x3f, 0xe5, 0x40, 0xb5, 0x79, 0xe5, 0x40, 0xb5, 0x34, 0xe6, 0x01, 0x70, 0x71, 0x42, 0x42, 0xe1, 0x95, 0xce, 0x5c, 0xe2, 0x40, 0xf3, 0x18, 0xb0, 0xe4, 0x40, 0xb5, 0x56, 0x99, 0x99, 0x99, 0x99, 0x9a, 0x40, 0xb5, 0x59, 0xe5, 0x40, 0xb7, 0x52, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd, 0x40, 0xb3, 0x15, 0x33, 0x33, 0x33, 0x33, 0x33, 0xe8, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x31, 0x35, 0x3a, 0x33, 0x39, 0x3a, 0x31, 0x37, 0xe3, 0x01, 0xf4, 0x40, 0xb5, 0x56, 0x33, 0x33, 0x33, 0x33, 0x33, 0xe3, 0x02, 0x40, 0xb5, 0x56, 0x99, 0x99, 0x99, 0x99, 0x9a, 0xe3, 0x01, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x7f, 0xe0, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x41, 0x39, 0x04, 0x43, 0x4a, 0x72, 0x2f, 0x06, 0x32, 0x30, 0x32, 0x31, 0x30, 0x31, 0x32, 0x30, 0xe1, 0x49, 0x46, 0x32, 0x31, 0x30, 0x32, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xe6
};


enum ftdc_fid_ext_type: uint16_t{
    ftdc_fid_ReqInit = 0x3025,
    ftdc_fid_RspInit = 0x3026,
    ftdc_fid_FirstReq = 0x3027,
    ftdc_fid_FirstRsp = 0x3028,
    ftdc_fid_ReqLogin = 0x3000,  //12288
    ftdc_fid_RspLogin = 0x3001,  //12289
    ftdc_fid_ReqSub = 0x4401,   //17409
    ftdc_fid_RspSub = 0x4402,   //17410
    ftdc_fid_ReqUnsub = 0x4403, //17411
    ftdc_fid_RspUnsub = 0x4404, //17412
    ftdc_fid_RtnMarketData = 0xf101,  ////61442
};


#ifdef __linux__
#define MyZeroMem(dst,len) \
	__asm__ __volatile__("cld;"\
		"rep stosb;"\
		:\
		: "a" (0),"D" (dst),"c" (len)\
	)
#else
#ifdef _M_X64
inline void MyZeroMem(char* dst,int len){
	while(len--) *dst++ = 0;
}
#else
inline void MyZeroMem(char* dst,int len){
	__asm{
		mov edi,[dst];
		mov ecx,[len];
		xor eax,eax;
		cld;
		rep stosb;
	}
}
#endif
#endif

namespace {
int DecodeZero(const char* pOrgData, unsigned int dataLen, char* deBuf, unsigned int* deLen){//��ѹ��0�г�ѹ��
	//int di = 0;
	//unsigned int i  = 0;
	const char* pEnd = pOrgData+dataLen;
	char* pDst = deBuf;
	while (pOrgData<pEnd){
		if (((*pOrgData)&0xF0)==0xE0){//ѹ��0���ֽ�
			unsigned int j = (*pOrgData++)&0x0F;
			if (j>0){
				//while(j--) *pDst++=0;
				MyZeroMem(pDst,j);
				pDst += j;
			}
			else{//0xE0Ϊת��
				*pDst++=*pOrgData++;
			}
		}
		else{ //δѹ�����ֽ�
			*pDst++=*pOrgData++;
		}
	}
	*deLen = (unsigned int)(pDst-deBuf);
	return 0;
}


int EncodeZero(const char* pOrgData, unsigned int dataLen, char* enBuf, unsigned int* enLen){//ѹ����0�г�ѹ��
	int di = 0;
	unsigned int pi  = 0;
	while (pi < dataLen){
		if ((((pOrgData[pi])&0xF0)==0xE0)){//��Ҫת��
			enBuf[di++]='\xE0';
			enBuf[di++]=pOrgData[pi];
		}
		else if(pOrgData[pi]==0x00){//��Ҫѹ��
			int j = 1;
			pi++;
			while(pOrgData[pi]==0x00&&pi<dataLen&&j<0x0F){
				j++;
				pi++;
			}
			enBuf[di++]=(char)(0xE0+j);
			continue;
		}
		else{
			enBuf[di++]=pOrgData[pi];
		}
		pi++;
	}
	*enLen = di;
	return 0;
}
}





#endif